name: Build And Release

on:
  push:
    tags:
      - v*.*.*

jobs:
  # Job 1: Build binaries for all platforms and architectures
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, darwin, windows]
        goarch: [amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          version=$(git describe --tags --always --match 'v*' | sed -n 's|^v\([0-9]*\.[0-9]*\.[0-9]*\)\(-.*\)\{0,1\}|\1|p')
          echo "version=$version" >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.20"

      - name: Ensure build directory exists
        run: mkdir -p build

      - name: Build whoiam for ${{ matrix.os }} and ${{ matrix.goarch }}
        run: |
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.goarch }} go build -o build/whoiam_server-${{ matrix.os }}-${{ matrix.goarch }} whoiam/whoiam.go

      - name: Build ddns for ${{ matrix.os }} and ${{ matrix.goarch }}
        run: |
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.goarch }} go build -o build/ddns_client-${{ matrix.os }}-${{ matrix.goarch }} ddns/ddns.go

      - name: Build proxyapi for ${{ matrix.os }} and ${{ matrix.goarch }}
        run: |
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.goarch }} go build -o build/proxy_server-${{ matrix.os }}-${{ matrix.goarch }} proxyapi/proxy.go

      # ***关键改动***
      # 使用独特的名称来上传 Artifact，比如：linux-amd64
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.goarch }} # 使用os-arch作为Artifact名称，保证唯一
          path: build/*
          retention-days: 1

  # Job 2: Create a single release after all builds are done
  release:
    runs-on: ubuntu-latest
    needs: build # 确保所有构建任务完成后才运行
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version (from tag)
        id: get_version
        run: |
          version=$(git describe --tags --always --match 'v*' | sed -n 's|^v\([0-9]*\.[0-9]*\.[0-9]*\)\(-.*\)\{0,1\}|\1|p')
          echo "version=$version" >> $GITHUB_ENV

      # ***关键改动***
      # 下载所有Artifacts，不指定名称
      - name: Download all binaries
        uses: actions/download-artifact@v4
        with:
          path: build/ # 下载所有二进制文件到 build 目录

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
          name: 🎉Release ${{ env.version }}
          tag_name: v${{ env.version }}
          body: Release v${{ env.version }}
          files: "build/**/*"
